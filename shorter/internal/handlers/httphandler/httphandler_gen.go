// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package httphandler

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// Error defines model for Error.
type Error struct {

	// Error code
	Code int32 `json:"code"`

	// Error message
	Message string `json:"message"`
}

// MakeUrlHash defines model for MakeUrlHash.
type MakeUrlHash struct {
	Url string `json:"Url"`
}

// UrlHash defines model for UrlHash.
type UrlHash struct {
	Hash string `json:"Hash"`
	Url  string `json:"Url"`
}

// MakeUrlHashJSONBody defines parameters for MakeUrlHash.
type MakeUrlHashJSONBody MakeUrlHash

// MakeUrlHashJSONRequestBody defines body for MakeUrlHash for application/json ContentType.
type MakeUrlHashJSONRequestBody MakeUrlHashJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (DELETE /url/del/{hash})
	DeleteUrl(ctx echo.Context, hash string) error

	// (GET /url/{hash})
	GetUrl(ctx echo.Context, hash string) error
	// Return all urls with hash
	// (GET /urls)
	GetUrlsWidthHash(ctx echo.Context) error

	// (POST /urls/new)
	MakeUrlHash(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteUrl converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUrl(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash string

	err = runtime.BindStyledParameter("simple", false, "hash", ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUrl(ctx, hash)
	return err
}

// GetUrl converts echo context to params.
func (w *ServerInterfaceWrapper) GetUrl(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hash" -------------
	var hash string

	err = runtime.BindStyledParameter("simple", false, "hash", ctx.Param("hash"), &hash)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUrl(ctx, hash)
	return err
}

// GetUrlsWidthHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetUrlsWidthHash(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUrlsWidthHash(ctx)
	return err
}

// MakeUrlHash converts echo context to params.
func (w *ServerInterfaceWrapper) MakeUrlHash(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeUrlHash(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/url/del/:hash", wrapper.DeleteUrl)
	router.GET(baseURL+"/url/:hash", wrapper.GetUrl)
	router.GET(baseURL+"/urls", wrapper.GetUrlsWidthHash)
	router.POST(baseURL+"/urls/new", wrapper.MakeUrlHash)

}
